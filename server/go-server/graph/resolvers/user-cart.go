package resolvers

///to-do : separer le truc apres
/*// GetUserCart is the resolver for the getUserCart field.
package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"go-server/graph/model"
)

func (r *QueryResolver) GetUserCarts(ctx context.Context) ([]*model.UserCart, error) {
	query := "SELECT UserId, Username, Password, DateOfBirth, Age, Email, CartNumber FROM UserCart"
	rows, err := r.DB.QueryContext(ctx, query)
	if err != nil {
		panic(fmt.Errorf("not implemented: GetPerson - getPerson"))
	}
	defer rows.Close()

	var userCarts []*model.UserCart
	for i := 0; i < len(userCarts); i++ {
		var userCart model.UserCart
		if rows.Next() {
			err := rows.Scan(&userCart.UserID, &userCart.Username, &userCart.Password, &userCart.DateOfBirth, &userCart.Age, &userCart.Email, &userCart.CartNumber)
			if err != nil {
				panic(fmt.Errorf("not implemented: GetPerson - getPerson"))
			}
			userCarts[i] = &userCart
		} else {
			break // Terminate the loop when no more rows are available
		}
	}

	if err := rows.Err(); err != nil {
		panic(fmt.Errorf("not implemented: GetPerson - getPerson"))
	}

	return userCarts, nil
}
*/
