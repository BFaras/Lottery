package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"go-server/graph"
	"go-server/graph/model"
)

// GetPerson is the resolver for the getPerson field.
func (r *queryResolver) GetPerson(ctx context.Context) ([]*model.Person, error) {
	panic(fmt.Errorf("not implemented: GetPerson - getPerson"))
}

// GetpPet is the resolver for the getpPet field.
func (r *queryResolver) GetpPet(ctx context.Context) ([]*model.Pet, error) {
	panic(fmt.Errorf("not implemented: GetpPet - getpPet"))
}

// GetUserCart is the resolver for the getUserCart field.
func (r *queryResolver) GetUserCart(ctx context.Context) ([]*model.UserCart, error) {
	rows, err := r.DB.Query("SELECT * FROM lottery.UserCart")
	if err != nil {
		fmt.Println("error1")
		fmt.Println(err)
	}

	var userCarts []*model.UserCart
	for rows.Next() { // Iterate as long as there are more rows
		var userCart model.UserCart
		err := rows.Scan(&userCart.UserID, &userCart.Username, &userCart.Password, &userCart.DateOfBirth, &userCart.Age, &userCart.Email, &userCart.CartNumber)
		if err != nil {
			fmt.Println("error2")
		}
		userCarts = append(userCarts, &userCart)
	}

	if err := rows.Err(); err != nil {
		fmt.Println("error3")
	}

	return userCarts, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
